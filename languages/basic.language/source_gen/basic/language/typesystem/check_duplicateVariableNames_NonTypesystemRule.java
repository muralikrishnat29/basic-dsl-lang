package basic.language.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import basic.language.behavior.BStatementContainer__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;

public class check_duplicateVariableNames_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_duplicateVariableNames_NonTypesystemRule() {
  }
  public void applyRule(final SNode bStatementContainer, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Set<String> varNames = SetSequence.fromSet(new HashSet<String>());
    for (SNode variable : Sequence.fromIterable(SNodeOperations.ofConcept(BStatementContainer__BehaviorDescriptor.getStatements_idPh_NG9Pt5h.invoke(bStatementContainer), CONCEPTS.BVariable$B1))) {
      if (SetSequence.fromSet(varNames).contains(SPropertyOperations.getString(variable, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(variable, "duplicate name: " + SPropertyOperations.getString(variable, PROPS.name$MnvL), "r:6dae767d-4ecf-4640-8c92-68f93fef7dff(basic.language.typesystem)", "7181604156655388642", null, errorTarget);
        }
      }
      SetSequence.fromSet(varNames).addElement(SPropertyOperations.getString(variable, PROPS.name$MnvL));
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BStatementContainer$ds;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BVariable$B1 = MetaAdapterFactory.getConcept(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa43875dL, "basic.language.structure.BVariable");
    /*package*/ static final SInterfaceConcept BStatementContainer$ds = MetaAdapterFactory.getInterfaceConcept(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0xd51973b09d195ddL, "basic.language.structure.BStatementContainer");
  }
}
