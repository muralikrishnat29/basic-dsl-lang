package basic.language.test.typesystem;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.test.runtime.CheckExpectedMessageRunnable;
import jetbrains.mps.errors.MessageStatus;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.project.ProjectBase;
import jetbrains.mps.lang.test.runtime.CheckErrorMessagesRunnable;
import java.util.ArrayList;
import jetbrains.mps.lang.test.runtime.CheckTypesAction;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@MPSLaunch
public class types_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(types_Test.class, "${project_home}", "r:4b07ccb3-afba-44b5-b0a9-25c537802a99(basic.language.test.typesystem@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public types_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_javaTestCase1() throws Throwable {
    new TestBody(this).test_javaTestCase1();
  }
  @Test
  public void test_NodeDuplicateNameCheck959714475431106582() throws Throwable {
    new TestBody(this).test_NodeDuplicateNameCheck959714475431106582();
  }
  @Test
  public void test_NodeDuplicateNameCheck959714475431130236() throws Throwable {
    new TestBody(this).test_NodeDuplicateNameCheck959714475431130236();
  }
  @Test
  public void test_NodeOperationNotSupportedCheck959714475431131225() throws Throwable {
    new TestBody(this).test_NodeOperationNotSupportedCheck959714475431131225();
  }
  @Test
  public void test_ErrorMessagesCheck959714475431137363() throws Throwable {
    new TestBody(this).test_ErrorMessagesCheck959714475431137363();
  }
  @Test
  public void test_NodeTypeCheck959714475431139709() throws Throwable {
    new TestBody(this).test_NodeTypeCheck959714475431139709();
  }
  @Test
  public void test_NodeTypeCheck959714475431142551() throws Throwable {
    new TestBody(this).test_NodeTypeCheck959714475431142551();
  }
  @Test
  public void test_NodeTypeSystemCheck959714475431162202() throws Throwable {
    new TestBody(this).test_NodeTypeSystemCheck959714475431162202();
  }
  @Test
  public void test_ErrorMessagesCheck959714475431132379() throws Throwable {
    new TestBody(this).test_ErrorMessagesCheck959714475431132379();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_javaTestCase1() throws Exception {
      addNodeById("959714475431069680");
      addNodeById("959714475431131990");
      addNodeById("959714475431148826");
      assert Objects.equals(SPropertyOperations.getString(getNodeById("959714475431148889"), PROPS.name$MnvL), "workbook3");
      assert Objects.equals(ListSequence.fromList(SLinkOperations.getChildren(getNodeById("959714475431148889"), LINKS.content$Ydej)).count(), 1);
    }

    public void test_NodeDuplicateNameCheck959714475431106582() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431069748");
      SNode operation = getRealNodeById("959714475431106582");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:6dae767d-4ecf-4640-8c92-68f93fef7dff(basic.language.typesystem)", "7181604156655388642"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeDuplicateNameCheck959714475431130236() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431130129");
      SNode operation = getRealNodeById("959714475431130236");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:6dae767d-4ecf-4640-8c92-68f93fef7dff(basic.language.typesystem)", "7181604156655388642"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_NodeOperationNotSupportedCheck959714475431131225() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431130338");
      SNode operation = getRealNodeById("959714475431131225");
      new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(nodeToCheck, MessageStatus.ERROR, new SNodePointer("r:6dae767d-4ecf-4640-8c92-68f93fef7dff(basic.language.typesystem)", "7181604156655792941"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_ErrorMessagesCheck959714475431137363() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431069697");
      SNode operation = getRealNodeById("959714475431137363");
      new CheckErrorMessagesRunnable(nodeToCheck, false, false, ((ProjectBase) myProject).getPlatform()).includeSelf(true).exclude(ListSequence.fromListAndArray(new ArrayList<CheckExpectedMessageRunnable>(), new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(getRealNodeById("959714475431069748"), MessageStatus.ERROR, new SNodePointer("r:6dae767d-4ecf-4640-8c92-68f93fef7dff(basic.language.typesystem)", "7181604156655388642"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()), new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(getRealNodeById("959714475431130129"), MessageStatus.ERROR, new SNodePointer("r:6dae767d-4ecf-4640-8c92-68f93fef7dff(basic.language.typesystem)", "7181604156655388642"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()), new CheckExpectedMessageRunnable.CheckExpectedRuleMessageRunnable(getRealNodeById("959714475431130338"), MessageStatus.ERROR, new SNodePointer("r:6dae767d-4ecf-4640-8c92-68f93fef7dff(basic.language.typesystem)", "7181604156655792941"), "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()))).run();
    }
    public void test_NodeTypeCheck959714475431139709() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431133673");
      SNode operation = getRealNodeById("959714475431139709");
      addNodeById("959714475431139720");
      new CheckTypesAction.CheckComputedType(nodeToCheck).checkTypeIs(getNodeById("959714475431139720"));
    }
    public void test_NodeTypeCheck959714475431142551() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431137075");
      SNode operation = getRealNodeById("959714475431142551");
      addNodeById("959714475431142594");
      new CheckTypesAction.CheckComputedType(nodeToCheck).checkTypeIs(getNodeById("959714475431142594"));
    }
    public void test_NodeTypeSystemCheck959714475431162202() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431158152");
      SNode operation = getRealNodeById("959714475431162202");
      new CheckExpectedMessageRunnable.CheckExpectedTypesystemMessageRunnable(nodeToCheck, MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()).run();
    }
    public void test_ErrorMessagesCheck959714475431132379() throws Exception {
      SNode nodeToCheck = getRealNodeById("959714475431132022");
      SNode operation = getRealNodeById("959714475431132379");
      new CheckErrorMessagesRunnable(nodeToCheck, false, false, ((ProjectBase) myProject).getPlatform()).includeSelf(true).exclude(ListSequence.fromListAndArray(new ArrayList<CheckExpectedMessageRunnable>(), new CheckExpectedMessageRunnable.CheckExpectedTypesystemMessageRunnable(getRealNodeById("959714475431158152"), MessageStatus.ERROR, "", myProject.getRepository(), ((ProjectBase) myProject).getPlatform()))).run();
    }

  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink content$Ydej = MetaAdapterFactory.getContainmentLink(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa438438L, 0x5d451e22fa438762L, "content");
  }
}
