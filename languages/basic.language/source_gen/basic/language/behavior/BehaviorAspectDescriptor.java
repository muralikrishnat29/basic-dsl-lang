package basic.language.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myBPlusExpression__BehaviorDescriptor = new BPlusExpression__BehaviorDescriptor();
  private final BHDescriptor myBMinusExpression__BehaviorDescriptor = new BMinusExpression__BehaviorDescriptor();
  private final BHDescriptor myBMulExpression__BehaviorDescriptor = new BMulExpression__BehaviorDescriptor();
  private final BHDescriptor myBBinaryExpression__BehaviorDescriptor = new BBinaryExpression__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBBinaryExpression__BehaviorDescriptor;
      case 1:
        return myBMinusExpression__BehaviorDescriptor;
      case 2:
        return myBMulExpression__BehaviorDescriptor;
      case 3:
        return myBPlusExpression__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa44bdb5L), MetaIdFactory.conceptId(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa447d47L), MetaIdFactory.conceptId(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa4499d6L), MetaIdFactory.conceptId(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa4443b7L)).seal();
}
