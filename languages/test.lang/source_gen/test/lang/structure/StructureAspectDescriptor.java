package test.lang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBAssertStatement = createDescriptorForBAssertStatement();
  /*package*/ final ConceptDescriptor myConceptBTestCase = createDescriptorForBTestCase();
  /*package*/ final ConceptDescriptor myConceptBTestSuite = createDescriptorForBTestSuite();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, "basic.language");
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, "basic.language");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBAssertStatement, myConceptBTestCase, myConceptBTestSuite);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BAssertStatement:
        return myConceptBAssertStatement;
      case LanguageConceptSwitch.BTestCase:
        return myConceptBTestCase;
      case LanguageConceptSwitch.BTestSuite:
        return myConceptBTestSuite;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBAssertStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("test.lang", "BAssertStatement", 0xf10d1faaa8dd47b7L, 0xb53f63749a13e53bL, 0xd51973b09ccb071L);
    b.class_(false, false, false);
    b.super_("basic.language.structure.BStatement", 0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa438ff2L);
    b.origin("r:5e013503-b4c4-4c99-a78d-ff5f568fbecd(test.lang.structure)/959714475429900401");
    b.version(2);
    b.aggregate("expr", 0xd51973b09ccb072L).target(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa4440a7L).optional(true).ordered(true).multiple(false).origin("959714475429900402").done();
    b.alias("assert");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBTestCase() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("test.lang", "BTestCase", 0xf10d1faaa8dd47b7L, 0xb53f63749a13e53bL, 0x9c46ef196c34077L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0xd51973b09d195ddL);
    b.origin("r:5e013503-b4c4-4c99-a78d-ff5f568fbecd(test.lang.structure)/703809425672192119");
    b.version(2);
    b.aggregate("content", 0x9c46ef196c340bdL).target(0xdf20d2ac476c4ef8L, 0x8b3f4802becda85fL, 0x5d451e22fa438ff2L).optional(true).ordered(true).multiple(true).origin("703809425672192189").done();
    b.alias("testCase");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBTestSuite() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("test.lang", "BTestSuite", 0xf10d1faaa8dd47b7L, 0xb53f63749a13e53bL, 0x9c46ef196c34074L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:5e013503-b4c4-4c99-a78d-ff5f568fbecd(test.lang.structure)/703809425672192116");
    b.version(2);
    b.aggregate("tests", 0x9c46ef196c3407aL).target(0xf10d1faaa8dd47b7L, 0xb53f63749a13e53bL, 0x9c46ef196c34077L).optional(true).ordered(true).multiple(true).origin("703809425672192122").done();
    return b.create();
  }
}
